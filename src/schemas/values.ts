import * as ParseResult from "effect/ParseResult"
import * as Schema from "effect/Schema"
import { Actor } from "../shared/schemas.js"

export const BaseAttribute = Schema.Struct({
	active_from: Schema.String,
	active_until: Schema.NullOr(Schema.String),
	created_by_actor: Actor,
})

export const CurrencyCode = Schema.Literal(
	"ARS",
	"AUD",
	"BRL",
	"BEL",
	"CAD",
	"CLP",
	"CNY",
	"COP",
	"CZK",
	"DKK",
	"EUR",
	"HKD",
	"ISK",
	"INR",
	"ILS",
	"JPY",
	"KRW",
	"MYR",
	"MXN",
	"NTD",
	"NZD",
	"NGN",
	"NOK",
	"XPF",
	"PEN",
	"PHP",
	"PLN",
	"GBP",
	"RWF",
	"SAR",
	"SGD",
	"ZAR",
	"SEK",
	"CHF",
	"AED",
	"UYU",
	"USD",
)

export const CountryCode = Schema.Literal(
	"AF",
	"AX",
	"AL",
	"DZ",
	"AS",
	"AD",
	"AO",
	"AI",
	"AQ",
	"AG",
	"AR",
	"AM",
	"AW",
	"AU",
	"AT",
	"AZ",
	"BS",
	"BH",
	"BD",
	"BB",
	"BY",
	"BE",
	"BZ",
	"BJ",
	"BM",
	"BT",
	"BO",
	"BA",
	"BW",
	"BV",
	"BR",
	"IO",
	"BN",
	"BG",
	"BF",
	"BI",
	"KH",
	"CM",
	"CA",
	"CV",
	"KY",
	"CF",
	"TD",
	"CL",
	"CN",
	"CX",
	"CC",
	"CO",
	"KM",
	"CG",
	"CD",
	"CK",
	"CR",
	"CI",
	"HR",
	"CU",
	"CW",
	"CY",
	"CZ",
	"DK",
	"DJ",
	"DM",
	"DO",
	"EC",
	"EG",
	"SV",
	"GQ",
	"ER",
	"EE",
	"ET",
	"FK",
	"FO",
	"FJ",
	"FI",
	"FR",
	"GF",
	"PF",
	"TF",
	"GA",
	"GM",
	"GE",
	"DE",
	"GH",
	"GI",
	"GR",
	"GL",
	"GD",
	"GP",
	"GU",
	"GT",
	"GG",
	"GN",
	"GW",
	"GY",
	"HT",
	"HM",
	"VA",
	"HN",
	"HK",
	"HU",
	"IS",
	"IN",
	"ID",
	"IR",
	"IQ",
	"IE",
	"IM",
	"IL",
	"IT",
	"JM",
	"JP",
	"JE",
	"JO",
	"KZ",
	"KE",
	"KI",
	"KR",
	"KW",
	"KG",
	"LA",
	"LV",
	"LB",
	"LS",
	"LR",
	"LY",
	"LI",
	"LT",
	"LU",
	"MO",
	"MK",
	"MG",
	"MW",
	"MY",
	"MV",
	"ML",
	"MT",
	"MH",
	"MQ",
	"MR",
	"MU",
	"YT",
	"MX",
	"FM",
	"MD",
	"MC",
	"MN",
	"ME",
	"MS",
	"MA",
	"MZ",
	"MM",
	"NA",
	"NR",
	"NP",
	"NL",
	"AN",
	"NC",
	"NZ",
	"NI",
	"NE",
	"NG",
	"NU",
	"NF",
	"MP",
	"NO",
	"OM",
	"PK",
	"PW",
	"PS",
	"PA",
	"PG",
	"PY",
	"PE",
	"PH",
	"PN",
	"PL",
	"PT",
	"PR",
	"QA",
	"RE",
	"RO",
	"RU",
	"RW",
	"BL",
	"SH",
	"KN",
	"LC",
	"MF",
	"PM",
	"VC",
	"WS",
	"SM",
	"ST",
	"SA",
	"SN",
	"SS",
	"RS",
	"SC",
	"SL",
	"SG",
	"SK",
	"SI",
	"SB",
	"SO",
	"ZA",
	"GS",
	"ES",
	"LK",
	"SD",
	"SR",
	"SJ",
	"SZ",
	"SE",
	"CH",
	"SY",
	"TW",
	"TJ",
	"TZ",
	"TH",
	"TL",
	"TG",
	"TK",
	"TO",
	"TT",
	"TN",
	"TR",
	"TM",
	"TC",
	"TV",
	"UG",
	"UA",
	"AE",
	"GB",
	"US",
	"UM",
	"UY",
	"UZ",
	"VU",
	"VE",
	"VN",
	"VG",
	"VI",
	"WF",
	"EH",
	"YE",
	"ZM",
	"ZW",
	"BQ",
	"KP",
	"SX",
	"XK",
	"AC",
)

// unwraps array on decode, wraps on encode
// handles empty arrays by returning null
export const ApiSingleValue = <A, I, R>(itemSchema: Schema.Schema<A, I, R>) =>
	Schema.transformOrFail(
		Schema.Array(itemSchema).pipe(Schema.maxItems(1)),
		Schema.NullOr(Schema.typeSchema(itemSchema)),
		{
			strict: false,
			decode: (arr) => ParseResult.succeed(arr.length === 0 ? null : arr[0]),
			encode: (item) => ParseResult.succeed(item === null ? [] : [item]),
		},
	)
